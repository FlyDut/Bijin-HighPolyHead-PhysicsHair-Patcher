using BijinAIOPathcer.Patchers;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Cache.Internals.Implementations;
using Mutagen.Bethesda.Skyrim;
using Mutagen.Bethesda.Synthesis;
using Noggog;
using System.Collections.Generic;

namespace BijinAIOPathcer
{
    public class Program
    {
        public static Lazy<Settings.Settings> settings = null!;
        public static async Task<int> Main(string[] args)
        {
            return await SynthesisPipeline.Instance
                .AddPatch<ISkyrimMod, ISkyrimModGetter>(RunPatch)
                .SetTypicalOpen(GameRelease.SkyrimSE, "YourPatcher.esp")
                .SetAutogeneratedSettings("Settings", "settings.json", out settings)
                .Run(args);
        }

        public static void RunPatch(IPatcherState<ISkyrimMod, ISkyrimModGetter> state)
        {
            Constants.BasePath = state.DataFolderPath + "\\meshes\\";



            string sourcePluginName = "Bijin AIO.esp";
            ModKey sourceModKey = ModKey.FromNameAndExtension(sourcePluginName);

            if (settings.Value.HeadMeshOutput.Equals("") && settings.Value.UseYourSkin)
            {
                Console.WriteLine("\n================== Notice ===================\n");
                throw new ArgumentException("When enabled \"Use Your Skin\". You must specify a High Mesh Output path to export");
                Console.WriteLine("\n");
            }
            else if (!settings.Value.UseYourSkin && settings.Value.UseYourSkinNormalMap)
            {
                Console.WriteLine("\n================== Notice ===================\n");
                throw new ArgumentException("When enabled \"Use Your Skin Normal Map\". You must enable \"Use Your Skin\".");
                Console.WriteLine("\n");
            }
            if (state.LoadOrder.TryGetValue(sourceModKey) is { Mod: not null } sourceMod)
            {
                ModKey skyrimModKey = ModKey.FromNameAndExtension("Skyrim.esm");
                ExtendedList<FormLink<IRaceGetter>> additionalRaces = [];
                foreach (uint key in Constants.AdditionalRaceIds)
                {
                    Constants.additionalRaces.Add(new FormLink<IRaceGetter>(new FormKey(skyrimModKey, key)));
                }
                Constants.defaultRace = new FormLinkNullable<IRaceGetter>(new FormKey(skyrimModKey, 0x000019));

                NpcPatcher.Apply(state, sourceMod.Mod);
                HeadPartPatcher.Apply(state, sourceMod.Mod);
                BodyMeshPatcher.Apply(state, sourceMod.Mod);
                TextureSetPatcher.Apply(state, sourceMod.Mod);
            }else{
                Console.WriteLine("\n================== Notice ===================\n");
                throw new ArgumentException("Bijin AIO.esp was not found. Please confirm that Bijin Fixes (AIO or Separate) has been installed, and ensure that the corresponding esp is loaded.");
                Console.WriteLine("\n");
            }
            



            string valericaPluginName = "Valerica.esp";
            ModKey valericaModKey = ModKey.FromNameAndExtension(valericaPluginName);
            if (state.LoadOrder.TryGetValue(valericaModKey) is { Mod: not null } valericaMod)
            {
                ImmutableModLinkCache<ISkyrimMod, ISkyrimModGetter> cache = valericaMod.Mod.ToImmutableLinkCache();
                NpcPatcher.ApplyValerica(state, cache);
                HeadPartPatcher.ApplyValerica(state, cache);
                BodyMeshPatcher.ApplyValerica(state, cache);
                TextureSetPatcher.ApplyValerica(state, cache);
            }else{
                Console.WriteLine("\n================== Notice ===================\n");
                throw new ArgumentException("Valerica.esp was not found. Please confirm that Bijin Fixes (AIO or Separate) has been installed, and ensure that the corresponding esp is loaded.");
                Console.WriteLine("\n");
            }




            string SeranaPluginName = "Serana.esp";
            ModKey SeranaModKey = ModKey.FromNameAndExtension(SeranaPluginName);
            if (state.LoadOrder.TryGetValue(SeranaModKey) is { Mod: not null } SeranaMod)
            {
                ImmutableModLinkCache<ISkyrimMod, ISkyrimModGetter> cache = SeranaMod.Mod.ToImmutableLinkCache();
                NpcPatcher.ApplySerana(state, cache);
                HeadPartPatcher.ApplySerana(state, cache);
                BodyMeshPatcher.ApplySerana(state, cache);
                TextureSetPatcher.ApplySerana(state, cache);
            }else{
                Console.WriteLine("\n================== Notice ===================\n");
                throw new ArgumentException("Serana.esp was not found. Please confirm that Bijin Fixes (AIO or Separate) has been installed, and ensure that the corresponding esp is loaded.");
                Console.WriteLine("\n");
            }
        }
    }
}
